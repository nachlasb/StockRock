import { useEffect, useState, useRef } from "react";
import { Play, Pause, Lock, Youtube } from "lucide-react";
import { Song, SentimentAnalysis } from "@/lib/types";
import { formatTime, parseDuration } from "@/lib/sentiment";
import AudioVisualizer from "./AudioVisualizer";

interface MusicPlayerProps {
  currentSong: Song | null;
  recentSongs: Song[];
  nextSong: Song | null;
  showNextSong: boolean;
  currentTime: number;
  sentiment: SentimentAnalysis | null;
}

export default function MusicPlayer({
  currentSong,
  recentSongs,
  nextSong,
  showNextSong,
  currentTime,
  sentiment,
}: MusicPlayerProps) {
  const [nextSongCountdown, setNextSongCountdown] = useState<string>("--:--");
  const [isPlaying, setIsPlaying] = useState<boolean>(false);
  const [videoId, setVideoId] = useState<string>("");
  const youtubePlayerRef = useRef<HTMLIFrameElement>(null);
  const playerReadyRef = useRef<boolean>(false);
  
  // Create YouTube player when song changes
  useEffect(() => {
    if (currentSong) {
      // Use the youtubeId that comes directly from the song object
      // This ensures we're playing exactly the song that the server provided
      const newVideoId = currentSong.youtubeId || "";
      setVideoId(newVideoId);
      
      // If player was already playing, autoplay the new song
      if (isPlaying) {
        // There will be a slight delay to initialize
        setTimeout(() => {
          setIsPlaying(true);
        }, 1000);
      }
    }
  }, [currentSong]);
  
  // Handle play/pause functionality
  useEffect(() => {
    // YouTube iframe API controls
    if (youtubePlayerRef.current && videoId) {
      const iframeWindow = youtubePlayerRef.current.contentWindow;
      
      if (iframeWindow && playerReadyRef.current) {
        if (isPlaying) {
          // Send play command to YouTube iframe
          iframeWindow.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
        } else {
          // Send pause command to YouTube iframe
          iframeWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}', '*');
        }
      }
    }
  }, [isPlaying, videoId]);
  
  // Setup YouTube API listener
  useEffect(() => {
    const handleYouTubeMessages = (event: MessageEvent) => {
      // This would be used to capture YouTube player events
      try {
        if (typeof event.data === 'string') {
          const data = JSON.parse(event.data);
          if (data.event === 'onReady') {
            // YouTube player is ready
            playerReadyRef.current = true;
            
            // If we should be playing, start playing
            if (isPlaying) {
              const iframeWindow = youtubePlayerRef.current?.contentWindow;
              iframeWindow?.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
            }
          }
        }
      } catch (e) {
        // Not a YouTube API message, ignore
      }
    };
    
    window.addEventListener('message', handleYouTubeMessages);
    return () => {
      window.removeEventListener('message', handleYouTubeMessages);
    };
  }, [isPlaying]);
  
  // Calculate time until next song reveal
  useEffect(() => {
    if (!currentSong) return;
    
    const intervalId = setInterval(() => {
      if (!currentSong) return;
      
      const duration = parseDuration(currentSong.duration);
      const remaining = Math.max(0, duration - currentTime);
      
      if (remaining <= 30) {
        setNextSongCountdown("00:00");
      } else {
        const timeToReveal = remaining - 30;
        setNextSongCountdown(formatTime(timeToReveal));
      }
    }, 1000);
    
    return () => clearInterval(intervalId);
  }, [currentSong, currentTime]);

  // Handle play/pause toggle
  const togglePlayPause = () => {
    if (currentSong) {
      setIsPlaying(!isPlaying);
    }
  };

  return (
    <div className="gradient-border">
      <div className="p-4">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold">Stock Sentiment Playlist</h2>
          <div className="text-sm text-muted-foreground">
            <span>Autogenerated based on market sentiment</span>
          </div>
        </div>
        
        {/* Current Playing Track */}
        <div className="bg-muted rounded-lg p-4 mb-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="w-16 h-16 rounded-md bg-card flex items-center justify-center overflow-hidden">
                {currentSong ? (
                  <div className="w-full h-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center text-white">
                    <Youtube className="w-8 h-8" />
                  </div>
                ) : (
                  <svg className="w-8 h-8 text-muted-foreground" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M9 18V5l12-2v13" />
                    <circle cx="6" cy="18" r="3" />
                    <circle cx="18" cy="16" r="3" />
                  </svg>
                )}
              </div>
              <div>
                <h3 className="font-semibold text-lg">
                  {currentSong?.title || "Select a stock to start"}
                </h3>
                <p className="text-muted-foreground">
                  {currentSong?.artist || "Playlist will be generated"}
                </p>
              </div>
            </div>
            <div className="flex items-center gap-4">
              <div className="text-right">
                <div className="text-sm font-mono">
                  <span>{currentSong ? formatTime(currentTime) : "--:--"}</span>
                  <span>/</span>
                  <span>{currentSong?.duration || "--:--"}</span>
                </div>
                <div className="text-xs text-muted-foreground">
                  {currentSong ? 
                    `Next song in ${nextSongCountdown}` : 
                    "Next song in --:--"}
                </div>
              </div>
              <button 
                className={`p-2 rounded-full ${currentSong ? 'bg-primary text-white hover:bg-primary/90' : 'bg-muted text-muted-foreground cursor-not-allowed'}`}
                onClick={togglePlayPause}
                disabled={!currentSong}
              >
                {isPlaying ? <Pause className="w-5 h-5" /> : <Play className="w-5 h-5" />}
              </button>
            </div>
          </div>
          
          {/* YouTube Player (hidden unless playing) */}
          <div className={`mt-4 relative ${isPlaying ? "block" : "hidden"}`} style={{ paddingBottom: "56.25%" }}>
            {videoId && (
              <iframe
                ref={youtubePlayerRef}
                className="absolute top-0 left-0 w-full h-full rounded-md"
                src={`https://www.youtube.com/embed/${videoId}?enablejsapi=1&autoplay=${isPlaying ? 1 : 0}&controls=0&modestbranding=1&rel=0&showinfo=0`}
                title="YouTube music player"
                frameBorder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowFullScreen
              ></iframe>
            )}
            {!videoId && currentSong && (
              <div className="absolute inset-0 flex flex-col items-center justify-center bg-black/20 rounded-md">
                <Youtube className="w-10 h-10 text-muted-foreground mb-2" />
                <p className="text-muted-foreground text-sm">Loading YouTube player...</p>
              </div>
            )}
            <div className="absolute inset-0 pointer-events-none" style={{ 
              background: "linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0) 100%)",
              zIndex: 1 
            }}></div>
          </div>
          
          {/* Audio visualizer (shown when not displaying YouTube) */}
          <div className={`mt-4 ${!isPlaying ? "block" : "hidden"}`}>
            <AudioVisualizer active={!!currentSong && isPlaying} />
            <div className="w-full h-1 bg-card mt-2 rounded overflow-hidden">
              <div 
                className="bg-primary h-full" 
                style={{ 
                  width: currentSong 
                    ? `${(currentTime / parseDuration(currentSong.duration)) * 100}%` 
                    : "0%" 
                }}
              ></div>
            </div>
          </div>
          
          {/* Song match reasoning */}
          <div className="mt-3 text-sm text-muted-foreground italic">
            <span>
              {currentSong?.sentimentReason || 
                "Songs will be matched to stock sentiment and performance patterns in real-time"}
            </span>
          </div>
        </div>
        
        {/* Coming Next Preview */}
        <div className="mb-4 bg-card rounded-lg p-4">
          <div className="flex justify-between items-center">
            <h3 className="font-medium">Coming Next</h3>
            <span className="text-sm text-muted-foreground">
              {currentSong ? `Reveals in ${showNextSong ? "0s" : nextSongCountdown}` : "Waiting"}
            </span>
          </div>
          
          <div className="mt-3">
            {!currentSong || !showNextSong ? (
              <div className="p-4 border border-dashed border-muted-foreground/30 rounded-lg flex items-center justify-center">
                <div className="flex items-center gap-3">
                  <Lock className="text-muted-foreground" />
                  <span className="text-muted-foreground">Next song revealing soon</span>
                </div>
              </div>
            ) : (
              <div className="bg-muted p-3 rounded-lg flex items-center justify-between fade-in">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-card rounded flex items-center justify-center">
                    <svg className="w-5 h-5 text-accent" viewBox="0 0 24 24" fill="currentColor">
                      <path d="M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z" />
                    </svg>
                  </div>
                  <div>
                    <h4 className="font-medium">{nextSong?.title}</h4>
                    <p className="text-muted-foreground text-sm">{nextSong?.artist}</p>
                  </div>
                </div>
                <div className="flex items-center text-muted-foreground text-sm">
                  <span>{nextSong?.duration}</span>
                </div>
              </div>
            )}
          </div>
        </div>
        
        {/* Recently Played Tracks */}
        <div>
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-md font-medium">Recently Played</h3>
            <span className="text-sm text-muted-foreground">Last 10 songs</span>
          </div>
          
          <div className="space-y-2">
            {recentSongs.length === 0 ? (
              <div className="bg-card rounded-lg p-6 text-center">
                <div className="w-full h-32 rounded-lg mb-4 bg-muted flex items-center justify-center">
                  <svg className="w-16 h-16 text-muted-foreground opacity-40" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z" />
                  </svg>
                </div>
                <h3 className="font-medium mb-2">Your sentiment playlist will appear here</h3>
                <p className="text-muted-foreground text-sm max-w-md mx-auto">
                  As you analyze stocks, we'll generate a custom playlist that matches the market sentiment
                </p>
              </div>
            ) : (
              recentSongs.map((song, index) => (
                <div 
                  key={`${song.id}-${index}`} 
                  className="bg-muted p-3 rounded-lg flex items-center justify-between fade-in"
                  style={{ animationDelay: `${index * 0.1}s` }}
                >
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 flex items-center justify-center text-muted-foreground">
                      {index + 1}
                    </div>
                    <div>
                      <h4 className="font-medium">{song.title}</h4>
                      <p className="text-muted-foreground text-sm">{song.artist}</p>
                    </div>
                  </div>
                  <div className="flex items-center text-muted-foreground text-sm">
                    <span>{song.duration}</span>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
